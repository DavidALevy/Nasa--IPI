{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","item","setitem","loading","setLoading","error","message","setError","handler","a","fetch","response","console","log","status","Error","json","data","useEffect","className","date","explanation","src","hdurl","alt","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAoDeA,EAhDH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,CACjCK,OAAO,EACPC,QAAS,KAFX,mBAAOD,EAAP,KAAcE,EAAd,KAIMC,EAAO,uCAAG,8BAAAC,EAAA,sEAEZL,GAAW,GAFC,SAGWM,MAAM,gEAHjB,UAGNC,EAHM,OAKZC,QAAQC,IAAIF,GACY,MAApBA,EAASG,OAND,sBAOJ,IAAIC,MAAM,qBAPN,wBASOJ,EAASK,OAThB,QASNC,EATM,OAUZf,EAAQe,EAAK,IACbL,QAAQC,IAAI,WAAYI,EAAK,IAC7Bb,GAAW,GAZC,kDAcZG,EAAS,CAAEF,OAAO,EAAMC,QAAS,KAAEA,UAdvB,0DAAH,qDAsBb,OAJAY,qBAAU,WACRV,MACC,IAECH,EAAMA,MACD,6BAAKA,EAAMC,UAGlB,gCACE,wBAAQa,UAAU,QAAlB,SAA0B,+CACzBhB,EACC,2CAEA,sBAAKgB,UAAU,OAAf,UACE,6CAAgBlB,EAAKmB,QACrB,4BAAInB,EAAKoB,cACT,qBAAKC,IAAKrB,EAAKsB,MAAMC,IAAI,cACzB,4BAAG,wBAAQC,QAASjB,EAAjB,oCClCEkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c2d2e223.chunk.js","sourcesContent":["import './App.css' ;\r\nimport { useEffect, useState } from \"react\";\r\n \r\n\r\nconst App = () => {\r\n  const [item, setitem] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState({\r\n    error: false,\r\n    message: \"\",\r\n  });\r\n  const handler = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(\"https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&count=1\"\r\n       );\r\n      console.log(response);\r\n      if (response.status !== 200) {\r\n        throw new Error(\"too many requests\");\r\n      }\r\n      const data = await response.json();\r\n      setitem(data[0]);\r\n      console.log(\"API info\", data[0]);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      setError({ error: true, message: e.message });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handler();\r\n  }, []);\r\n\r\n  if (error.error) {\r\n    return <h1>{error.message}</h1>;\r\n  }\r\n  return (\r\n    <div>\r\n      <header className=\"title\"><h1 >Nasa Photos</h1></header>\r\n      {loading ? (\r\n        <p>loading...</p>\r\n      ) : (\r\n        <div className='main'>\r\n          <p>Image date: {item.date}</p>\r\n          <p>{item.explanation}</p>\r\n          <img src={item.hdurl}alt=\"astronomy\"/>\r\n          <p><button onClick={handler}>get new image</button></p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}